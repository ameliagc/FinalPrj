206 Final Project - Option 2

Amelia Cacchione
4/25/17

Description:
This code pulls data from both Twitter and OMDB that can be used to look at the relationship between tweets and movies. Three databases are created about the tweets, users, and movies. There is a Movie class to hold data about a movie and a method to return information about the movie's rating. This code generates an output file that compares data about tweets, movies mentioned in tweets, and the ratings of movies.

How to run file:
- Run this file by navigating to the folder in which it is saved and executing the command "python 206_data_access.py"

Dependencies:
- You must provide your own "twitter_info.py" file in the same directory with your customized keys to access the Twitter api.

Files:
- README.txt (Explains what the code does and how to run it)
- databases.db (Contains the three databases generated by the code: Tweets, Users, and Movies)
- summary_stats.txt (The text output file from the code with a summary of statistics)
- 206_data_access.py (Python file with all of the code for the project)
- user_twitter_cache.json (JSON file of cached data about a single Twitter user)
- twitter_cache.json (JSON file of cached data about Tweets relating to a search term)
- omdb_cache.json (JSON file of cached data about a movie on OMDB)
- 206_project_plan.py (First draft of cases for the project)
- 206_final_project_plan.txt (First draft of final project plan)

Functions:
- get_twitter_search_data(movie_title)
	- Input: string that represents the title of a movie (required)
	- Return value: a dictionary of information about 15 tweets related to that movie title
	- Behavior: caches data if not cached already

- get_twitter_user_data(username)
	- Input: string that represents a twitter username (required)
	- Return value: a dictionary of information about a user
	- Behavior: caches data if not cached already

- get_omdb_data(movie_list)
	- Input: a list of movie titles (required)
	- Return: a list of dictionaries of information about each of the movies
	- Behavior: caches data if not cached already

Class:
- Movie(object)
	- One instance represents information about a single movie collected from the omdb api, including the instance variables: title, director, IMDB rating, list of actors, and number of languages.
	- Required constructor input: a dictionary representing data about a movie collected from the omdb api
	- Methods:
		__str__(self)
		- returns how the print function for this class should work
		is_movie_good(self)
		- Behavior: evaluates if a movie is "good" or "bad" based on if it has a rating of higher than 5 or not
		- Return: a boolean value with True representing good and False representing bad

Database Creation:
	- Tweets table
		- tweet_id: primary key that is a string that holds a unique id for the tweet
		- user_id: integer that represents a unique user
		- tweet_text: the text in the tweet
		- user: username of user who posted the tweet
		- retweets: number of retweets the tweet has
		- favorites: number of favorites the tweet has
		- user_mentions: usernames of any users mentioned in the tweets
		- movie_search: title of movie in search term used to find tweets
	- Users table
		- user_id: unique id for user
		- screen_name: username of user
		- favorites: number of tweets the user has favorited
	- Movies table
		- 







